#!/usr/bin/env bash
# Copyright 2017-2020 by SDRausty. All rights reserved, see LICENSE 🌎 🌍 🌏
# Hosting sdrausty.github.io/TermuxArch courtesy https://pages.github.com.
# https://sdrausty.github.io/TermuxArch/README has info about this project.
# https://sdrausty.github.io/TermuxArch/CONTRIBUTORS Thank you for your help.
##############################################################################
# IFS=$'\n\t'
set -Eeuo pipefail
shopt -s nullglob globstar
unset LD_PRELOAD
VERSIONID=2.0.593
 
_TRPERR_() {  # run on script error
	local RV="$?"
	printf "\\e[?25h\\n\\e[1;48;5;138m %s\\e[0m\\n\\n" "TermuxArch WARNING:  Generated script signal ${RV:-unknown} near or at line number ${1:-unknown} by `${2:-command}`!"
	exit 201
}
 
_TRPET_() {  # run on exit
	local RV="$?" 
  	printf "" 
	 
	if [[ "$RV" = 0 ]]
	then
		printf "\\e[0;32m%s\\e[1;34m: \\e[1;32m%s\\e[0m\\n\\e[0m" "${0##*/} $@ 2.0.593" "DONE 🏁 "
		printf "\\e]2; %s: %s \007" "${0##*/} $@" "DONE 🏁 "
	else 
		printf "\\e[0;32m%s \\e[0m%s\\e[1;34m: \\e[1;32m%s\\e[0m\\n\\e[0m" "${0##*/} $@ 2.0.593" "[Exit Signal $RV]" "DONE  🏁 "
		printf "\033]2; %s: %s %s \007" "${0##*/} $@" "[Exit Signal $RV]" "DONE 🏁 "
	fi
	printf "\e[?25h\e[0m"
	set +Eeuo pipefail
	exit
}
 
_TRPSIG_() {  # run on signal
	printf "\\e[?25h\\e[1;7;38;5;0mTermuxArch WARNING:  Signal $? received!\\e[0m\\n"
 	exit 211
}
 
_TRPQ_() {  # run on quit
	printf "\\e[?25h\\e[1;7;38;5;0mTermuxArch WARNING:  Quit signal $? received!\\e[0m\\n"
 	exit 221
}
 
trap '_TRPERR_ $LINENO $BASH_COMMAND $?' ERR
trap _TRPET_ EXIT
trap _TRPSIG_ HUP INT TERM
trap _TRPQ_ QUIT
 
declare -a KEYRINGS

_TRPET_() { # on exit
printf "\\e[?25h\\e[0m"
set +Eeuo pipefail
 	_PRINTTAIL_ "$KEYRINGS[@]"
}

_GENEN_() { # This for loop generates entropy on device for $t seconds.
N=2 # Number of loop generations for generating entropy.
T0=256 # Maximum number of seconds loop will run unless keys completes earlier.
T1=0.4
for I in "$(seq 1 "$N")"; do
"$(nice -n 20 ls -alR / >/dev/null 2>/dev/null & sleep "$T0" ; kill $! >/dev/null)" >/dev/null &
sleep "$T1"
"$(nice -n 20 find / >/dev/null 2>/dev/null & sleep "$T0" ; kill $! >/dev/null)" >/dev/null &
sleep "$T1"
"$(nice -n 20 cat /dev/urandom >/dev/null 2>/dev/null & sleep "$T0" ; kill $! >/dev/null)" >/dev/null &
sleep "$T1"
done
disown
}

_PRINTTAIL_() {
printf "\\n\\e[0;32m%s %s %s\\e[1;34m: \\e[1;32m%s\\e[0m 🏁  \\n\\n\\e[0m" "TermuxArch ${0##*/}" "$ARGS" "$VERSIONID" "DONE 📱"
printf '\033]2;  🔑 TermuxArch %s:DONE 📱 \007' "${0##*/}"
}

trap _TRPET_ EXIT
## keys begin ##################################################################

if [[ -z "${1:-}" ]]
then
KEYRINGS[0]="archlinux-keyring"
KEYRINGS[1]="archlinuxarm-keyring"
KEYRINGS[2]="ca-certificates-utils"
elif [[ "$1" = x86 ]]
then
KEYRINGS[0]="archlinux32-keyring-transition"
KEYRINGS[1]="ca-certificates-utils"
elif [[ "$1" = x86_64 ]]
then
KEYRINGS[0]="archlinux-keyring"
KEYRINGS[1]="ca-certificates-utils"
else
KEYRINGS="$@"
fi
ARGS="${KEYRINGS[@]}"
printf '\033]2;  🔑 TermuxArch %s 📲 \007' "'${0##*/} $ARGS'"
printf "\\n\\e[1;32m==> \\e[1;37m%s \\e[0;32m%s \\e[1;32m%s %s \\e[0m%s...\\n" "Running" "TermuxArch" "${0##*/}" "$ARGS" "$VERSIONID"
printf "\\n\\e[1;32m[1/2] \\e[0;34mWhen \\e[0;37mgpg: Generating pacman keyring master key\\e[0;34m appears on the screen, the installation process can be accelerated.  The system desires a lot of entropy at this part of the install procedure.  To generate as much entropy as possible quickly, watch and listen to a file on your device.  \\n\\nThe program \\e[1;32mpacman-key\\e[0;34m will want as much entropy as possible when generating keys.  Entropy is also created through tapping, sliding, one, two and more fingers tapping with short and long taps.  When \\e[0;37mgpg: Generating pacman keyring master key\\e[0;34m appears on the screen, use any of these simple methods to accelerate the installation process if it is stalled.  Put even simpler, just do something on device.  Browsing files will create entropy on device.  Slowly swiveling the device in space and time will accelerate the installation process.  This method alone might not generate enough entropy (a measure of randomness in a closed system) for the process to complete quickly.  You can use \\e[1;32mbash ~%s/bin/we \\e[0;34min a new Termux session to watch entropy on device.\\n\\n\\e[1;32m==>\\e[0m Running \\e[1mpacman-key --init\\e[0;32m...\\n" "/arch"
pacman-key --init || sudo pacman-key --init ||:
chmod 700 /etc/pacman.d/gnupg
pacman-key --populate || sudo pacman-key --populate ||:
printf "\\n\\e[1;32m==>\\e[0m Running \\e[1mpacman -S %s --noconfirm --color=always\\e[0;32m...\\n" "$ARGS"
pacman -S "${KEYRINGS[@]}" --noconfirm --color=always || sudo pacman -S "${KEYRINGS[@]}" --noconfirm --color=always ||:
printf "\\n\\e[1;32m[2/2] \\e[0;34mWhen \\e[1;37mAppending keys from archlinux.gpg\\e[0;34m appears on the screen, the installation process can be accelerated.  The system desires a lot of entropy at this part of the install procedure.  To generate as much entropy as possible quickly, watch and listen to a file on your device.  \\n\\nThe program \\e[1;32mpacman-key\\e[0;34m will want as much entropy as possible when generating keys.  Entropy is also created through tapping, sliding, one, two and more fingers tapping with short and long taps.  When \\e[1;37mAppending keys from archlinux.gpg\\e[0;34m appears on the screen, use any of these simple methods to accelerate the installation process if it is stalled.  Put even simpler, just do something on device.  Browsing files will create entropy on device.  Slowly swiveling the device in space and time will accelerate the installation process.  This method alone might not generate enough entropy (a measure of randomness in a closed system) for the process to complete quickly.  Use \\e[1;32mbash ~%s/bin/we \\e[0;34min a new Termux session to watch entropy on device.\\n\\n\\e[1;32m==>\\e[0m Running \\e[1mpacman-key --populate\\e[0;32m...\\n" "/arch"
pacman-key --populate || sudo pacman-key --populate ||:
printf "\\e[1;32m==>\\e[0m Running \\e[1mpacman -Ss keyring --color=always\\e[0m...\\n"
pacman -Ss keyring --color=always || sudo pacman -Ss keyring --color=always ||:
# keys EOF
